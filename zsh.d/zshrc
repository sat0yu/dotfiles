# -*- sh -*-

# 言語設定
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

# キーバインド
## viキーバインドを使う。
bindkey -v
bindkey -M viins '^[' vi-cmd-mode
bindkey -M viins 'jj' vi-cmd-mode
## emacsライクな操作も許容
bindkey "^e" end-of-line
bindkey "^a" beginning-of-line
bindkey "^f" forward-char
bindkey "^b" backward-char
bindkey "^h" backward-delete-char
bindkey "^d" delete-char
bindkey "^k" kill-line
bindkey "^P" up-line-or-history
bindkey "^N" down-line-or-history

# ディレクトリ移動
## 最近移動した履歴からディレクトリをひらく
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
## cdで移動してもpushdと同じようにディレクトリスタックに追加する。
setopt auto_pushd
## カレントディレクトリ中に指定されたディレクトリが見つからなかった場合に
## 移動先を検索するリスト。
cdpath=(~)
## ディレクトリが変わったらディレクトリスタックを表示。
chpwd_functions=($chpwd_functions dirs)

# ヒストリ
## ヒストリを保存するファイル
HISTFILE=~/.zsh_history
## メモリ上のヒストリ数。
## 大きな数を指定してすべてのヒストリを保存するようにしている。
HISTSIZE=10000000
## 保存するヒストリ数
SAVEHIST=$HISTSIZE
## ヒストリファイルにコマンドラインだけではなく実行時刻と実行時間も保存する。
setopt extended_history
## 同じコマンドラインを連続で実行した場合はヒストリに登録しない。
setopt hist_ignore_dups
## スペースで始まるコマンドラインはヒストリに追加しない。
setopt hist_ignore_space
## すぐにヒストリファイルに追記する。
setopt inc_append_history
## zshプロセス間でヒストリを共有する。
setopt share_history
## C-sでのヒストリ検索が潰されてしまうため、出力停止・開始用にC-s/C-qを使わない。
setopt no_flow_control

# 展開
## --prefix=~/localというように「=」の後でも
## 「~」や「=コマンド」などのファイル名展開を行う。
setopt magic_equal_subst
## 拡張globを有効にする。
## glob中で「(#...)」という書式で指定する。
setopt extended_glob
## globでパスを生成したときに、パスがディレクトリだったら最後に「/」をつける。

# ジョブ
## jobsでプロセスIDも出力する。
setopt long_list_jobs

# 実行時間
## 実行したプロセスの消費時間が3秒以上かかったら
## 自動的に消費時間の統計情報を表示する。
REPORTTIME=3

# ログイン・ログアウト
## 全てのユーザのログイン・ログアウトを監視する。
watch="all"

## ^Dでログアウトしないようにする。
setopt ignore_eof

## lsとpsの設定
### ls: できるだけGNU lsを使う。
### ps: 自分関連のプロセスのみ表示。
case $(uname) in
    *BSD|Darwin)
    if [ -x "$(which gnuls)" ]; then
        alias ls="gnuls"
        alias la="ls -lhAF --color=auto"
    else
        alias la="ls -lhAFG"
    fi
    alias ps="ps -fU$(whoami)"
    ;;
    SunOS)
    if [ -x "`which gls`" ]; then
        alias ls="gls"
        alias la="ls -lhAF --color=auto"
    else
        alias la="ls -lhAF"
    fi
    alias ps="ps -fl -u$(/usr/xpg4/bin/id -un)"
    ;;
    *)
    alias la="ls -lhAF --color=auto"
    alias ps="ps -fU$(whoami) --forest"
    ;;
esac
alias ls="la"

# fgを使わずctrl+zで行ったり来たりする
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# 共通alias
alias -g L="|& $PAGER"
alias -g G='| grep'
alias -g H='| head'
alias -g T='| tail'
alias -g S='| sed'
alias -g X='| xargs'
function git-hash(){
  git log --oneline --branches | fzf | awk '{print $1}'
}
alias -g GL='$(git-hash)'
## 完全に削除
alias rr="command rm -rf"
## ファイル操作を確認する
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
## grepの表示を改善
alias grep="grep --color=auto"

## カスタムaliasの設定
### ~/zsh.d/zshalias → ~/zshaliasの順に探して
### 最初に見つかったファイルを読み込む。
### (N-.): 存在しないファイルは登録しない。
###    パス(...): ...という条件にマッチするパスのみ残す。
###            N: NULL_GLOBオプションを設定。
###               globがマッチしなかったり存在しないパスを無視する。
###            -: シンボリックリンク先のパスを評価。
###            .: 通常のファイルのみ残す。
### 2011-11-06
alias_files=(~/zsh.d/zshalias(N-.)
             ~/zshalias(N-.)
             ~/dotfiles/zsh.d/zshalias(N-.))
for alias_file in ${alias_files}; do
    source "${alias_file}"
    break
done

## homebrewでインストールしたプログラムを優先する
export PATH=/usr/local/bin:/usr/local/sbin:$PATH

# golang
export GO111MODULE=on
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# anyframe
# git clone git@github.com:mollifier/anyframe.git ~/.zsh/anyframe
fpath=($HOME/.zsh/anyframe(N-/) $fpath)
autoload -Uz anyframe-init
anyframe-init
# よく移動するディレクトリ一覧をインクリメントサーチ & 移動
bindkey '^@' anyframe-widget-cdr
# bash history一覧インクリメントサーチ & 実行
bindkey '^r' anyframe-widget-execute-history
# branch一覧をインクリメントサーチ & checkout
bindkey '^x^b' anyframe-widget-checkout-git-branch
# プロセス一覧をインクリメントサーチ & kill
bindkey '^x^k' anyframe-widget-kill
# ghqで管理しているリポジトリに移動
bindkey '^g' anyframe-widget-cd-ghq-repository

## pet
# https://github.com/knqyf263/pet
# 直前のコマンドをpetに登録
function prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}
# コマンドライン上にスニペットを表示する
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^s' pet-select

# pyenv (installed via brew)
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# rbenv (installed via brew)
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# nvm (installed via brew)
unset PREFIX
export NVM_DIR="$HOME/.nvm"
source "$(brew --prefix nvm)/nvm.sh"

# fzf (https://github.com/junegunn/fzf)
# brew install fzf ripgrep
# $(brew --prefix)/opt/fzf/install
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS='--reverse'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'

# gcloud (brew cask install google-cloud-sdk)
export CLOUDSDK_PYTHON="/usr/local/opt/python@3.8/libexec/bin/python"
source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
export USE_GKE_GCLOUD_AUTH_PLUGIN=True
