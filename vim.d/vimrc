" to install neobundle.vim, execute following one liner
" git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
" ----- start NeoBundle settings -----
set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle'))
endif

NeoBundle 'Shougo/neocomplcache.vim'
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'windows' : 'make -f make_mingw32.mak',
    \ 'cygwin' : 'make -f make_cygwin.mak',
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'kana/vim-submode'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'mhinz/vim-startify'
NeoBundle 'taglist.vim'
NeoBundle 'terryma/vim-expand-region'

filetype plugin on
filetype indent on


" ----- common settings -----
" エンコード ( + UTF-8文字化け対応 )
set termencoding=utf-8
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,cp932
" ファイルエンコード
set fileencoding=utf-8
" シンタックスハイライト
syntax on
" 256色表示
set t_Co=256
" ステータスバーを常に表示
set laststatus=2
"set statusline=%{expand('%:p:t')}\ %<[%{expand('%:p:h')}]%=\ %m%r%y%w[%{&fenc!=''?&fenc:&enc}][%{&ff}][%3l,%3c,%3p]
" カーソル行をアンダーライン
set cursorline
" スクロール時の余白確保
set scrolloff=10
" Macターミナル上での動作が重くなる現象を軽減
set lazyredraw
" 行番号を表示
set number
" 変更中のファイルでも、保存しないで他のファイルを表示
set hidden
" 新しく開く代わりにすでに開いてあるバッファを開く
set switchbuf=useopen
" 小文字の検索でも大文字も見つかるようにする
set ignorecase
" ただし大文字も含めた検索の場合はその通りに検索する
set smartcase
" インクリメンタルサーチを行う
set incsearch
" スペルチェックを行う
" set spell
" 検索結果をハイライト
set hlsearch
" マウスモード有効
set mouse=a
" 不可視文字を表示
set list
set listchars=trail:-,extends:>,precedes:<,nbsp:%,eol:$,tab:▸\ 
" タブ幅を指定
set tabstop=4
set shiftwidth=4
" タブを半角スペースに変換
set expandtab
" 対応括弧をハイライト表示する
set showmatch
" 対応括弧の表示秒数を3秒にする
set matchtime=3
" インサートモード時にバックスペースを使う
set backspace=indent,eol,start
" ファイルを開いたときに前回の編集箇所に移動
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
" ESCを2回入力で検索時のハイライトを解除
nnoremap <ESC><ESC> :nohlsearch<CR>
" 選択した範囲のインデントサイズを連続変更
vnoremap < <gv
vnoremap > >gv
" 検索語が画面中央にくるようにする
nmap n nzz
nmap N Nzz


" ----- key-binds in insert mode -----
inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-h> <left>
inoremap <c-l> <right>


" ----- window operation settings -----
" prefix key
nnoremap s <Nop>
" ウィンドウ分割
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
" ウィンドウを閉じる
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
" ウィンドウ間の移動
nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sw <C-w>w
" ウィンドウそのもののの移動
nnoremap sH <C-w>H
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
" カレントウィンドウのサイズ変更
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap s= <C-w>=
" 以下の4つはvim-submodeへ移行
"nnoremap s> <C-w>>
"nnoremap s< <C-w><
"nnoremap s+ <C-w>+
"nnoremap s- <C-w>-
" タブページ関連
nnoremap st :<C-u>tabnew<CR>
nnoremap sn gt
nnoremap sp gT


" ----- Unite settings -----
" 入力モードで開始する
let g:unite_enable_start_insert=1
" ESCキーを2回押すと終了する(<C-g>でも可能)
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>Unite -buffer-name=files buffer file_mru bookmark file<CR>
" Unite-grep
nnoremap <silent> ,ug :<C-u>Unite grep:%:-iHRn<CR>


" ----- NERDTree settings -----
let file_name = expand("%")
nnoremap <C-e> :NERDTreeToggle<CR>
" vim起動時にツリーを表示する
"if has('vim_starting') &&  file_name == ""
"	autocmd VimEnter * NERDTree ./
"endif


" ----- lightline settings -----
let g:lightline = {
    \ 'colorscheme': 'solarized'
    \ }


" ----- Syntastic settings -----
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2


" ----- Neocomplcache settings -----
" Neocomplcacheの有効化
let g:neocomplcache_enable_at_startup = 1
" 入力に大文字が入力されていたら、大文字小文字の区別をする
let g:neocomplcache_enable_smart_case = 0
" アンダーバー区切りの補完を無効化(有効にすると重い)
let g:neocomplcache_enable_underbar_completion = 0
" 大文字小文字区切りの曖昧検索を無効化(有効にすると重い)
let g:neocomplcache_enable_camel_case_completion = 0
" キャッシュする最小文字列長
let g:neocomplcache_min_syntax_length = 4
" tabで補完候補の選択を行う
inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
" 補完候補の中から、共通する部分を補完
inoremap <expr><C-l>   neocomplcache#complete_common_string()
" 選択している候補をキャンセルし、ポップアップを閉じます
inoremap <expr><C-e> neocomplcache#cancel_popup()


" ----- startify settings -----
" startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付を設定している)
let g:startify_custom_header = map(split(system('date'), '\n'), '"   ". v:val') + ['','']
" デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'i', 'o', 'b']
"よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
        \ '~/dotfiles/vim.d/vimrc',
        \ '~/.subversion/config',
        \ '~/.gitconfig',
        \ ]


" ----- taglist settings -----
" SHOULD EXEC A ONE-LINER BELOW
" % brew install ctags

" ctagsのコマンド
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
" 現在表示中のファイルのみのタグしか表示しない
let Tlist_Show_One_File = 1
" 右側にtag listのウインドを表示する
let Tlist_Use_Right_Window = 1
" taglistのウインドウだけならVimを閉じる
let Tlist_Exit_OnlyWindow = 1
" \lでtaglistウインドウを開いたり閉じたり出来るショートカット
nnoremap <silent> <leader>l :TlistToggle<CR>


" ---- vim-expand-region settings -----
map K <Plug>(expand_region_expand)
map J <Plug>(expand_region_shrink)


" ---- vim-submode -----
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
