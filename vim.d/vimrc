" to install neobundle.vim, execute following one liner
" git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
" ----- start NeoBundle settings -----
set nocompatible
filetype off

" ----- chech the condition for neocomplete -----
function! s:meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

" ----- plugins depending on Neobundle -----
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim
    call neobundle#begin(expand('~/.vim/bundle/'))

    if s:meet_neocomplete_requirements()
        NeoBundle 'Shougo/neocomplete.vim'
        NeoBundleFetch 'Shougo/neocomplcache.vim'
    else
        NeoBundleFetch 'Shougo/neocomplete.vim'
        NeoBundle 'Shougo/neocomplcache.vim'
    endif

    NeoBundle 'Shougo/vimproc', {
    \ 'build'       : {
    \     'windows' : 'make -f make_mingw32.mak',
    \     'cygwin'  : 'make -f make_cygwin.mak',
    \     'mac'     : 'make -f make_mac.mak',
    \     'unix'    : 'make -f make_unix.mak',
    \ }
    \ }
    NeoBundleLazy 'Shougo/vimshell',{
    \ 'depends'     : 'Shougo/vimproc',
    \ 'autoload'    : {
    \     'commands': [
    \        {
    \           'name'      : 'VimShell',
    \           'complete'  : 'customlist,vimshell#complete'
    \        },
    \        'VimShellExecute',
    \        'VimShellInteractive',
    \        'VimShellTerminal',
    \        'VimShellPop'
    \     ],
    \     'mappings': ['<Plug>(vimshell_']
    \ }
    \ }
    NeoBundleLazy 'Shougo/unite.vim', {'autoload': {'commands': 'Unite'}}
    NeoBundle 'Shougo/neomru.vim'
    NeoBundle 'kana/vim-submode'
    NeoBundle 'tomasr/molokai'
    NeoBundle 'Yggdroot/indentLine'
    NeoBundle 'scrooloose/syntastic'
    NeoBundle 'scrooloose/nerdtree'
    NeoBundle 'itchyny/lightline.vim'
    NeoBundle 'osyo-manga/vim-anzu'
    NeoBundle 'mhinz/vim-startify'
    NeoBundleLazy 'majutsushi/tagbar', {'autoload': {'commands': 'TagBar'}}
    NeoBundle 'soramugi/auto-ctags.vim'
    NeoBundle 'terryma/vim-expand-region'
    NeoBundle 'tyru/caw.vim.git'
    NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload': {'filetypes':'coffee'}}
    NeoBundleLazy 'derekwyatt/vim-scala', {'autoload': {'filetypes':'scala'}}
    NeoBundleLazy 'elixir-lang/vim-elixir', {'autoload': {'filetypes':'elixir'}}
    NeoBundle 'kakkyz81/evervim'

    call neobundle#end()
endif

filetype plugin on
filetype indent on


" ----- common settings -----
" エンコード ( + UTF-8文字化け対応 )
set termencoding=utf-8
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-boms,utf-8,euc-jp,cp932
set fileformats=unix,dos,mac
" シンタックスハイライト
if neobundle#is_installed('molokai')
    colorscheme molokai
endif
set t_Co=256
syntax enable
syntax on
" ステータスバーを常に表示
set laststatus=2
"set statusline=%{expand('%:p:t')}\ %<[%{expand('%:p:h')}]%=\ %m%r%y%w[%{&fenc!=''?&fenc:&enc}][%{&ff}][%3l,%3c,%3p]
" スクロール時の余白確保
set scrolloff=10
" Macターミナル上での動作が重くなる現象を軽減
set lazyredraw
" 行番号を表示
set number
" カーソルの左右移動で行末から次の行の行頭へ移動
set whichwrap=b,s,h,l,<,>,[,],~
" 変更中のファイルでも、保存しないで他のファイルを表示
set hidden
" 新しく開く代わりにすでに開いてあるバッファを開く
set switchbuf=useopen
" 小文字の検索でも大文字も見つかるようにする
set ignorecase
" ただし大文字も含めた検索の場合はその通りに検索する
set smartcase
" インクリメンタルサーチを行う
set incsearch
" スペルチェックを行う
" set spell
" 検索結果をハイライト
set hlsearch
" マウスモード有効
if has('mouse')
    set mouse=a
    if has('mouse_sgr')
        set ttymouse=sgr
    elseif v:version > 703 || v:version is 703 && has('patch632')
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    endif
endif
" クリップボードからコピーした際に不要なインデントを防ぐ
if &term =~ "xterm"
    let &t_SI .= "\e[?2004h"
    let &t_EI .= "\e[?2004l"
    let &pastetoggle = "\e[201~"

    function XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction

    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif
" 不可視文字を表示
set list
set listchars=trail:-,extends:>,precedes:<,nbsp:%,eol:↲,tab:▸\
" タブを半角スペースに変換, タブ幅を指定
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" 改行時のインデント挙動
set autoindent
set smartindent
" 対応括弧をハイライト表示する
set showmatch
" 対応括弧の表示秒数を0.1秒にする
set matchtime=1
" インサートモード時にバックスペースを使う
set backspace=indent,eol,start
" 長い行でも@で省略せずに表示
set display=lastline
" 補完ポップアップの高さ
set pumheight=10
" コマンドモードでも補完
" set wildmode=longest:full
set wildmenu
set history=5000
" ファイルを開いたときに前回の編集箇所に移動
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
" ESCを2回入力で検索時のハイライトを解除
nnoremap <ESC><ESC> :nohlsearch<CR>
" 選択した範囲のインデントサイズを連続変更
vnoremap < <gv
vnoremap > >gv
" 検索語が画面中央にくるようにする
nmap n nzz
nmap N Nzz
" Yの動作をDと揃える(行末までヤンク)
nnoremap Y y$
" insertモードでカーソルの形を変える
if !has('gui_running')
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
" □とか○の文字があってもカーソル位置がずれないようにする
" iTerm2の Preferences → Profiles → Textタブで
" 「Treat ambiguous-width characters as double width」をチェック
if exists('&ambiwidth')
    set ambiwidth=double
endif
" 表示行単位で移動する
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk

" ----- function keys -----
command! Run call s:Run()
nnoremap <F5> :Run<CR>
function! s:Run()
    let e = expand("%:e")
    if e == "c"
        :RunC
    endif
    if e == "cpp"
        :RunCplus
    endif
    if e == "py"
        :RunPython
    endif
    if e == "scala"
        :RunScala
    endif
endfunction

command! RunScala call s:RunScala()
function! s:RunScala()
    :!/usr/local/bin/scala %
endfunction

command! RunPython call s:RunPython()
function! s:RunPython()
    :!/usr/local/bin/python %
endfunction

command! RunC call s:RunC()
function! s:RunC()
    :!gcc % -o %:r.out
    :!./%:r.out
endfunction

command! RunCplus call s:RunCplus()
function! s:RunCplus()
    :!g++ % -o %:r.out
    :!./%:r.out
endfunction

command! Debug call s:Debug()
nnoremap <S-F5> :Debug<CR>
function! s:Debug()
    let e = expand("%:e")
    if e == "c"
        :DebugC
    endif
    if e == "cpp"
        :DebugCplus
    endif
endfunction

command! DebugC call s:DebugC()
function! s:DebugC()
    :!gcc % -g3 -O0 -Wall -o %:r.out
    :!lldb ./%:r.out
endfunction

command! DebugCplus call s:DebugCplus()
function! s:DebugCplus()
    :!g++ % -g3 -O0 -Wall -o %:r.out
    :!lldb ./%:r.out
endfunction

" ----- key-binds in insert mode -----
inoremap <c-a> <home>
inoremap <c-e> <end>
" jjでエスケープ
inoremap <silent> jj <ESC>

" ----- window operation settings -----
" prefix key
nnoremap s <Nop>
" ウィンドウ分割
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
" ウィンドウを閉じる
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
" ウィンドウ間の移動
nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sw <C-w>w
" ウィンドウそのもののの移動
nnoremap sH <C-w>H
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
" カレントウィンドウのサイズ変更
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap s= <C-w>=
" ウィンドウサイズの変更はvim-submodeへ移行
"nnoremap s> <C-w>>
"nnoremap s< <C-w><
"nnoremap s+ <C-w>+
"nnoremap s- <C-w>-
" タブページ関連
nnoremap st :<C-u>tabnew<CR>
" タブの移動はvim-submodeへ移行
"nnoremap sn gt
"nnoremap sp gT
" ; と : を入れ替える(for MBA)
" noremap ; :
" noremap : ;


" ----- VimShell settings -----
" ,is: シェルを起動
nnoremap <silent> ,is :VimShell<CR>
" ,ipy: pythonを非同期で起動
nnoremap <silent> ,ipy :VimShellInteractive python<CR>
" ,irb: irbを非同期で起動
nnoremap <silent> ,irb :VimShellInteractive irb<CR>


" ----- Unite settings -----
let s:bundle = neobundle#get("unite.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:unite_enable_start_insert=1
    let g:unite_source_file_mru_limit = 300
    let g:unite_kind_jump_list_after_jump_scroll=0
endfunction
unlet s:bundle

" ESCキーを2回押すと終了する(<C-g>でも可能)
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>Unite -buffer-name=files buffer file_mru bookmark file<CR>
" Unite-grep
nnoremap <silent> ,ug :<C-u>Unite grep:%:-iHRn<CR>


" ----- QuickFix settings -----
" vimgrep, grepをQuickFixで表示
autocmd QuickFixCmdPost *grep if len(getqflist()) != 0 | cwindow | endif
" <C-l>でQuickFix表示をトグル
command! ToggleQuickFix call s:ToggleQuickFix()
function! s:ToggleQuickFix()
    let _ = winnr('$')
    cclose
    if _ == winnr('$')
        cwindow
    endif
endfunction
nnoremap <silent> <C-l> :ToggleQuickFix<CR>
" :q実行時にQuickFixだけ残っている場合には閉じて終了
autocmd WinEnter * call s:QuickFix_Exit_OnlyWindow()
function s:QuickFix_Exit_OnlyWindow()
    if winnr('$') == 1
        if (getbufvar(winbufnr(0), '&buftype')) == 'quickfix'
            quit
        endif
    endif
endfunction


" ----- NERDTree settings -----
let file_name = expand("%")
nnoremap <C-e> :NERDTreeToggle<CR>
" vim起動時にツリーを表示する
"if has('vim_starting') &&  file_name == ""
"	autocmd VimEnter * NERDTree ./
"endif


" ----- lightline settings -----
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
    \   'left': [
    \       ['mode', 'paste'],
    \       ['readonly', 'filename', 'modified', 'anzu']
    \   ]
    \ },
    \ 'component_function': {
    \   'anzu': 'anzu#search_status'
    \ }
    \ }


" ----- vim-anzusettings -----
nmap n <Plug>(anzu-n)
nmap N <Plug>(anzu-N)
nmap * <Plug>(anzu-star)
nmap # <Plug>(anzu-sharp)
augroup vim-anzu
    autocmd!
    autocmd CursorHold,CursorHoldI,WinLeave,TabLeave * call anzu#clear_search_status()
augroup END


" ----- Syntastic settings -----
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=0
let g:syntastic_always_populate_loc_list=1
" <C-k>でLocationList表示をトグル
command! ToggleLocationList call s:ToggleLocationList()
function! s:ToggleLocationList()
    let _ = winnr('$')
    lclose
    if _ == winnr('$')
        Errors
    endif
endfunction
nnoremap <silent> <C-k> :ToggleLocationList<CR>


" ----- Neocomplete and Neocomplcache settings -----
if s:meet_neocomplete_requirements()
    " Neocompleteの有効化
    let g:neocomplete#enable_at_startup = 1
    " 入力に大文字が入力されていたら、大文字小文字の区別をする
    let g:neocomplete#enable_smart_case = 0
    " あいまい補完を有効化
    let g:neocomplete#enable_fuzzy_completion = 1
    " シンタックスファイル中で補完対象となる最小長．初期値は4
    let g:neocomplete#min_syntax_length = 4
    " 補完キーワード
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'
    " Enterで一番先頭の候補を選んで補完完了
    inoremap <expr><CR> pumvisible() ? "\<C-n>" . neocomplete#close_popup() : "<CR>"

    " 辞書の定義
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'c' : $HOME . '/.vim/dict/c.dict',
        \ 'cpp' : $HOME . '/.vim/dict/cpp.dict',
        \ 'scala' : $HOME . '/.vim/dict/scala.dict',
    \ }
    autocmd FileType * execute printf("setlocal dict=$HOME/.vim/dict/%s.dict", &filetype)
else
    " Neocomplcacheの有効化
    let g:neocomplcache_enable_at_startup = 1
    " 入力に大文字が入力されていたら、大文字小文字の区別をする
    let g:neocomplcache_enable_smart_case = 0
    " アンダーバー区切りの補完を無効化(有効にすると重い)
    let g:neocomplcache_enable_underbar_completion = 0
    " 大文字小文字区切りの曖昧検索を無効化(有効にすると重い)
    let g:neocomplcache_enable_camel_case_completion = 0
    " シンタックスファイル中で補完対象となる最小長．初期値は4
    let g:neocomplcache_min_syntax_length = 4
    " Enterで一番先頭の候補を選んで補完完了
    inoremap <expr><CR> pumvisible() ? "\<C-n>" . neocomplcache#close_popup() : "<CR>"
endif
" tabで補完候補の選択を行う
inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"


" ----- startify settings -----
" startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付を設定している)
let g:startify_custom_header = map(split(system('date'), '\n'), '"   ". v:val') + ['','']
" デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'i', 'o', 'b']
"よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
        \ '~/dotfiles/vim.d/vimrc',
        \ '~/.subversion/config',
        \ '~/.gitconfig',
        \ ]


" ----- tagbar -----
" SHOULD EXEC A ONE-LINER BELOW
" % brew install ctags

" ctagsのコマンド
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
" <F8>でtagbar表示をトグル
nnoremap <silent> <F8> :TagbarToggle<CR>


" ----- auto-ctags -----
" ファイル保存時に自動でtagsファイル作成
let g:auto_ctags = 1
" tagsファイル作成場所
let g:auto_ctags_directory_list = ['.git', '.svn']
" tagsファイル格納(読み取り)場所
set tags+=.git/tags,/.svn/tags
" 複数タグが存在することを想定
nnoremap <C-]> g<C-]>


" ---- vim-expand-region settings -----
map K <Plug>(expand_region_expand)
map J <Plug>(expand_region_shrink)


" ---- vim-submode -----
" ウィンドウサイズの変更
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
" タブの切り替え
call submode#enter_with('tabmove', 'n', '', 'sn', 'gt')
call submode#enter_with('tabmove', 'n', '', 'sp', 'gT')
call submode#map('tabmove', 'n', '', 'n', 'gt')
call submode#map('tabmove', 'n', '', 'p', 'gT')


" ---- caw.vim -----
nmap C <Plug>(caw:hatpos:toggle)
vmap C <Plug>(caw:hatpos:toggle)


" ---- vim-coffee-script -----
au BufRead,BufNewFile,BufReadPre *.coffee set filetype=coffee
" インデント設定
autocmd FileType coffee setlocal sw=2 sts=2 ts=2 et
" オートコンパイル
" 保存と同時にコンパイルする
autocmd BufWritePost *.coffee silent make!
" エラーがあったら別ウィンドウで表示
autocmd QuickFixCmdPost * nested cwindow | redraw!
" Ctrl-cで右ウィンドウにコンパイル結果を一時表示する
nnoremap <silent> <C-l> :CoffeeCompile vert <CR><C-w>h


" ---- evervim -----
" This plug-in needs the python embeded vim
" and markdown library in that python.
" These conditions are checked with below commands:
" 1) :echo has('python')
" 2) :python import markdown
" And an API-key of evernote has to be specified.
" let g:evervim_devtoken='S=s999:U=9ee99c9:E=999d9999c99:C=99a99a99999:P=9cd:A=en-devtoken:H=cd99999de9999c99b999d99d999cb9f9'
nnoremap <silent> ,el :<C-u>EvervimNotebookList<CR>
nnoremap <silent> ,eT :<C-u>EvervimListTags<CR>
nnoremap <silent> ,en :<C-u>EvervimCreateNote<CR>
nnoremap ,es :<C-u>EvervimSearchByQuery<SPACE>
